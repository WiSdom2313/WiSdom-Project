using Cysharp.Threading.Tasks;
using WiSdom.SaveSystem.Data;
using WiSJoy.DesignPattern;

namespace WiSdom.SaveSystem
{
	/*
		How to use DataManager:
		1. Declare your data class in DataClass.cs
		2. Open WiSdom -> Data Editor -> follow the instructions -> the code will be generated in this and GameData.cs
		3. Use DataManager to load and save data
		4. Use DataManager.Data to access your data
		5. Use DataManager.ISALLDATALOADED to check if all data is loaded
		6. Use DataManager.ISDATASAVING to check if data is saving
		7. Use DataManager.ClearAllData() to clear all data
		8. Use DataManager.SaveAllData() to save all data
		9. Use DataManager.LoadAllData() to load all data
		----------------------------------------------
		Should not modify in Auto Generators region
		All fields and methods should be declared in the corresponding region
		----------------------------------------------
		After all, try to save manually in script
	*/
	public class DataManager : SingletonMonoBehaviour<DataManager>
	{
		/*
			All fields are declared here
			No declare fields in other regions
		*/
		#region Fields
		public static bool ISALLDATALOADED = false;
		public static bool ISDATASAVING = false;
		public GameData Data = new GameData();

		#endregion

		/*
			All methods are declared here
			No declare methods in other regions
		*/
		#region Methods

		protected override void Awake()
		{
			base.Awake();
			Fetch().Forget();
		}
		async UniTask Fetch()
		{
			ISALLDATALOADED = false;
			await LoadAllData();
			// Your data control logic here
			ISALLDATALOADED = true;
		}

		#endregion


		/* --------------------WARNING--------------------
        // Do not modify this region
        // Generated by Roslyn
        */
		#region Auto Generators
		#region Data Control
		public async UniTask LoadAllData()
		{
			#region Load Data
			await LoadVersionDataData();
			await LoadPlayerDataData();
			await LoadDeviceInfoData();
			await LoadBasicTypeDataData();
			#endregion
		}
		public async UniTask SaveAllData()
		{
			ISDATASAVING = true;
			#region Save Data
			await SaveVersionDataData();
			await SavePlayerDataData();
			await SaveDeviceInfoData();
			await SaveBasicTypeDataData();
			#endregion
			ISDATASAVING = false;
		}
		public void ClearAllData()
		{
			#region Clear Data
			SaveManager.ClearData("VersionData");
			SaveManager.ClearData("PlayerData");
			SaveManager.ClearData("DeviceInfo");
			SaveManager.ClearData("BasicTypeData");
			#endregion
		}
		#endregion
		#region Methods Generators
		public async UniTask LoadVersionDataData()
		{
			Data.VersionData = await SaveManager.LoadData<VersionData>("VersionData");
			if (Data.VersionData is null)
			{
				Data.VersionData = new VersionData();
			}
		}
		public async UniTask SaveVersionDataData()
		{
			await SaveManager.SaveData(Data.VersionData, "VersionData");
		}
		public void ClearVersionDataData()
		{
			SaveManager.ClearData("VersionData");
		}
		public async UniTask LoadPlayerDataData()
		{
			Data.PlayerData = await SaveManager.LoadData<PlayerData>("PlayerData");
			if (Data.PlayerData is null)
			{
				Data.PlayerData = new PlayerData();
			}
		}
		public async UniTask SavePlayerDataData()
		{
			await SaveManager.SaveData(Data.PlayerData, "PlayerData");
		}
		public void ClearPlayerDataData()
		{
			SaveManager.ClearData("PlayerData");
		}
		public async UniTask LoadDeviceInfoData()
		{
			Data.DeviceInfo = await SaveManager.LoadData<DeviceInfo>("DeviceInfo");
			if (Data.DeviceInfo is null)
			{
				Data.DeviceInfo = new DeviceInfo();
			}
		}
		public async UniTask SaveDeviceInfoData()
		{
			await SaveManager.SaveData(Data.DeviceInfo, "DeviceInfo");
		}
		public void ClearDeviceInfoData()
		{
			SaveManager.ClearData("DeviceInfo");
		}
		public async UniTask LoadBasicTypeDataData()
		{
			Data.BasicTypeData = await SaveManager.LoadData<BasicTypeData>("BasicTypeData");
			if (Data.BasicTypeData is null)
			{
				Data.BasicTypeData = new BasicTypeData();
			}
		}
		public async UniTask SaveBasicTypeDataData()
		{
			await SaveManager.SaveData(Data.BasicTypeData, "BasicTypeData");
		}
		public void ClearBasicTypeDataData()
		{
			SaveManager.ClearData("BasicTypeData");
		}
		#endregion
		#endregion
		// --------------------THE END--------------------
	}
}