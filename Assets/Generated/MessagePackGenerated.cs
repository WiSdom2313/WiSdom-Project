// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

using UnityEngine;

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(19)
            {
                { typeof(global::System.Collections.Generic.Dictionary<string, float>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<string, int>), 1 },
                { typeof(global::System.Collections.Generic.Dictionary<string, string>), 2 },
                { typeof(global::System.Collections.Generic.HashSet<float>), 3 },
                { typeof(global::System.Collections.Generic.HashSet<int>), 4 },
                { typeof(global::System.Collections.Generic.HashSet<string>), 5 },
                { typeof(global::System.Collections.Generic.List<bool>), 6 },
                { typeof(global::System.Collections.Generic.List<byte>), 7 },
                { typeof(global::System.Collections.Generic.List<decimal>), 8 },
                { typeof(global::System.Collections.Generic.List<double>), 9 },
                { typeof(global::System.Collections.Generic.List<float>), 10 },
                { typeof(global::System.Collections.Generic.List<int>), 11 },
                { typeof(global::System.Collections.Generic.List<long>), 12 },
                { typeof(global::System.Collections.Generic.List<short>), 13 },
                { typeof(global::System.Collections.Generic.List<string>), 14 },
                { typeof(global::WiSdom.SaveSystem.Data.BasicTypeData), 15 },
                { typeof(global::WiSdom.SaveSystem.Data.DeviceInfo), 16 },
                { typeof(global::WiSdom.SaveSystem.Data.PlayerData), 17 },
                { typeof(global::WiSdom.SaveSystem.Data.VersionData), 18 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<string, float>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<string, int>();
                case 2: return new global::MessagePack.Formatters.DictionaryFormatter<string, string>();
                case 3: return new global::MessagePack.Formatters.HashSetFormatter<float>();
                case 4: return new global::MessagePack.Formatters.HashSetFormatter<int>();
                case 5: return new global::MessagePack.Formatters.HashSetFormatter<string>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<bool>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<byte>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<decimal>();
                case 9: return new global::MessagePack.Formatters.ListFormatter<double>();
                case 10: return new global::MessagePack.Formatters.ListFormatter<float>();
                case 11: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 12: return new global::MessagePack.Formatters.ListFormatter<long>();
                case 13: return new global::MessagePack.Formatters.ListFormatter<short>();
                case 14: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 15: return new MessagePack.Formatters.WiSdom.SaveSystem.Data.BasicTypeDataFormatter();
                case 16: return new MessagePack.Formatters.WiSdom.SaveSystem.Data.DeviceInfoFormatter();
                case 17: return new MessagePack.Formatters.WiSdom.SaveSystem.Data.PlayerDataFormatter();
                case 18: return new MessagePack.Formatters.WiSdom.SaveSystem.Data.VersionDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.WiSdom.SaveSystem.Data
{
    public sealed class BasicTypeDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WiSdom.SaveSystem.Data.BasicTypeData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::WiSdom.SaveSystem.Data.BasicTypeData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(30);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Vector2>(formatterResolver).Serialize(ref writer, value.Vector2, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Vector3>(formatterResolver).Serialize(ref writer, value.Vector3, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Vector4>(formatterResolver).Serialize(ref writer, value.Vector4, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Quaternion>(formatterResolver).Serialize(ref writer, value.Quaternion, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Color>(formatterResolver).Serialize(ref writer, value.Color, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Color32>(formatterResolver).Serialize(ref writer, value.Color32, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Serialize(ref writer, value.ints, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.floats, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.strings, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<bool[]>(formatterResolver).Serialize(ref writer, value.bools, options);
            writer.Write(value.bytes);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<short[]>(formatterResolver).Serialize(ref writer, value.shorts, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Serialize(ref writer, value.longs, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<double[]>(formatterResolver).Serialize(ref writer, value.doubles, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<decimal[]>(formatterResolver).Serialize(ref writer, value.decimals, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.intList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<float>>(formatterResolver).Serialize(ref writer, value.floatList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.stringList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<bool>>(formatterResolver).Serialize(ref writer, value.boolList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>(formatterResolver).Serialize(ref writer, value.byteList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<short>>(formatterResolver).Serialize(ref writer, value.shortList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<long>>(formatterResolver).Serialize(ref writer, value.longList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<double>>(formatterResolver).Serialize(ref writer, value.doubleList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<decimal>>(formatterResolver).Serialize(ref writer, value.decimalList, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>(formatterResolver).Serialize(ref writer, value.intDictionary, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>(formatterResolver).Serialize(ref writer, value.floatDictionary, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>(formatterResolver).Serialize(ref writer, value.stringDictionary, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<int>>(formatterResolver).Serialize(ref writer, value.intHashSet, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<float>>(formatterResolver).Serialize(ref writer, value.floatHashSet, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<string>>(formatterResolver).Serialize(ref writer, value.stringHashSet, options);
        }

        public global::WiSdom.SaveSystem.Data.BasicTypeData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::WiSdom.SaveSystem.Data.BasicTypeData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Vector2 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Vector2>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Vector3 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Vector3>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Vector4 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Vector4>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.Quaternion = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Quaternion>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.Color = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Color>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.Color32 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<Color32>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.ints = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.floats = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.strings = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.bools = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<bool[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 10:
                        ____result.bytes = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 11:
                        ____result.shorts = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<short[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 12:
                        ____result.longs = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<long[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 13:
                        ____result.doubles = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<double[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 14:
                        ____result.decimals = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<decimal[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 15:
                        ____result.intList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 16:
                        ____result.floatList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<float>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 17:
                        ____result.stringList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 18:
                        ____result.boolList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<bool>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 19:
                        ____result.byteList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<byte>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 20:
                        ____result.shortList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<short>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 21:
                        ____result.longList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<long>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 22:
                        ____result.doubleList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<double>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 23:
                        ____result.decimalList = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<decimal>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 24:
                        ____result.intDictionary = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, int>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 25:
                        ____result.floatDictionary = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, float>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 26:
                        ____result.stringDictionary = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 27:
                        ____result.intHashSet = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<int>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 28:
                        ____result.floatHashSet = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<float>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 29:
                        ____result.stringHashSet = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DeviceInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WiSdom.SaveSystem.Data.DeviceInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::WiSdom.SaveSystem.Data.DeviceInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceModel, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceType, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceSystem, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceSystemVersion, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DeviceUniqueIdentifier, options);
        }

        public global::WiSdom.SaveSystem.Data.DeviceInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::WiSdom.SaveSystem.Data.DeviceInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.DeviceName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.DeviceModel = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.DeviceType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.DeviceSystem = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.DeviceSystemVersion = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.DeviceUniqueIdentifier = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WiSdom.SaveSystem.Data.PlayerData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::WiSdom.SaveSystem.Data.PlayerData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::WiSdom.SaveSystem.Data.PlayerData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::WiSdom.SaveSystem.Data.PlayerData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class VersionDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WiSdom.SaveSystem.Data.VersionData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::WiSdom.SaveSystem.Data.VersionData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Ver, options);
            writer.Write(value.VerCode);
        }

        public global::WiSdom.SaveSystem.Data.VersionData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::WiSdom.SaveSystem.Data.VersionData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Ver = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.VerCode = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

